{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tool to generate forest garden designs \u00b6 Desired end goal is to have a web app which lets you select certain parameters, then when you click generate, it returns the layout for a forest garden according to your parameters. To start off with it will just be the API backend and a HTTP client as the frontend. Send HTTP POST to URL, it returns a Forest Garden layout Maybe just coordinates and data to start with, not an actual image Tech stack: \u00b6 Frontend: Svelte Typescript Tailwind CSS or generated from backend Backend: Go sqlc + pgx or FastAPI SQLModel Celery + Redis Database: Postgresql Development \u00b6 Sketch \u00b6 Write short document explaining what the app is and what it does Create initial wireframes for pages The main content should be at the center of the page so it has most focus Phase 1: \u00b6 Project bootstrapping Documentation generation Initial Hello world code Config/settings file Able to deploy for testing Able to generate a basic image Phase 2: \u00b6 Can send/receive HTTP requests to HTTP server HTTP server can return test data from app Simple processing of the data 2 separate areas: image generation algos to determine plant locations retrieve plant information which image to get, based on info from client focus on image generation first does the plant data even need to be in a database? probably should when there are lots of plants Phase 3: \u00b6 Able to connect to database Database schema migrations and SQL generation HTTP server can connect to database and return test data Working API backend which when sending a request with a HTTP client, returns a JSON response which describes a basic garden layout and plant attributes. Backend can determine basic relationships between plants from test data Phase 4: \u00b6 More sophisticated methods for determining relationships between plants from test data Phase 5: \u00b6 API backend returns generated basic images instead of JSON data Future \u00b6 Range slider which displays the growth over time of the forest garden Expand to larger land area Expand variety of plants Different geographic regions than just UK Notes \u00b6 Write the documentation and text on the website from a gardeners perspective, not an IT one. Someone wanting a garden layout doesnt care that its written in X programming language using X framework. Deployment to server running NGINX Unit. SCP new binary to server. Ping Unit to load new app. Look into how to generate SVG images SVG are text. If we minify and compress them, could we serve them direct from a HTTP cache in front rather than storing them in object storage. Think about design of the frontend, how will it look? Buttons and sliders then click submit? How to handle scale? Need to set max limit on size otherwise it wont fit on screen and take loads of CPU time. Maybe set reasonable limits and just say if you need bigger then run it multiple times and join them up yourself. Maybe use standard colours to denote canopy layer, climbers, perrenials etc. Then have a text output which has a key and explains what specific plants are used. Rate limiting, caching etc. If you want to show changes over time, you'd need to generate a long series of images, or a GIF/video. So you may want to cache requests and already generated images when they have been generated before. Then maybe have an option to generate a new image which bypasses the cache. Lots of variables to consider Initial input parameters Light, wind, water Plants relationships to one another geographic location - will determine sun location, average temperature, hardiness zones MSCW \u00b6 field inputs to change grid, like size or zone/climate type show time periods to show different timelines of the plants. First planted / X years / X decades. Trees will outlive most plants. Perrenials last longer than biennial etc. need a DB containing the different plants/trees and weighting for different plants. draw walls and ponds/lakes/water feature. Some plants like walls/shade. Some plants are aquatic. needs to be layered. Trees take up lots of space higher up, not so much at the base of the trunk. May also need to show underground, as some plants have tubers or other specific root structures. Square grid. Use regular shapes (just squares/rectangles?) to show plant location and area taken up. Application is responsible for generating the grid locations for each plant, then its up to the frontend to decide how to display it. Maybe instead of layers it could be 3 separate images, one for each layer. Then they could be side-by-side. Or overlaid, depends on the frontend. Label the circles underneath with an ID number, then have a key at the side that says the plant name and a link to a page which describes all aspects about that plant. Wont do - Seaweed app like vertical ocean farming. This can be done later or as a second app.","title":"Home"},{"location":"#tool-to-generate-forest-garden-designs","text":"Desired end goal is to have a web app which lets you select certain parameters, then when you click generate, it returns the layout for a forest garden according to your parameters. To start off with it will just be the API backend and a HTTP client as the frontend. Send HTTP POST to URL, it returns a Forest Garden layout Maybe just coordinates and data to start with, not an actual image","title":"Tool to generate forest garden designs"},{"location":"#tech-stack","text":"Frontend: Svelte Typescript Tailwind CSS or generated from backend Backend: Go sqlc + pgx or FastAPI SQLModel Celery + Redis Database: Postgresql","title":"Tech stack:"},{"location":"#development","text":"","title":"Development"},{"location":"#sketch","text":"Write short document explaining what the app is and what it does Create initial wireframes for pages The main content should be at the center of the page so it has most focus","title":"Sketch"},{"location":"#phase-1","text":"Project bootstrapping Documentation generation Initial Hello world code Config/settings file Able to deploy for testing Able to generate a basic image","title":"Phase 1:"},{"location":"#phase-2","text":"Can send/receive HTTP requests to HTTP server HTTP server can return test data from app Simple processing of the data 2 separate areas: image generation algos to determine plant locations retrieve plant information which image to get, based on info from client focus on image generation first does the plant data even need to be in a database? probably should when there are lots of plants","title":"Phase 2:"},{"location":"#phase-3","text":"Able to connect to database Database schema migrations and SQL generation HTTP server can connect to database and return test data Working API backend which when sending a request with a HTTP client, returns a JSON response which describes a basic garden layout and plant attributes. Backend can determine basic relationships between plants from test data","title":"Phase 3:"},{"location":"#phase-4","text":"More sophisticated methods for determining relationships between plants from test data","title":"Phase 4:"},{"location":"#phase-5","text":"API backend returns generated basic images instead of JSON data","title":"Phase 5:"},{"location":"#future","text":"Range slider which displays the growth over time of the forest garden Expand to larger land area Expand variety of plants Different geographic regions than just UK","title":"Future"},{"location":"#notes","text":"Write the documentation and text on the website from a gardeners perspective, not an IT one. Someone wanting a garden layout doesnt care that its written in X programming language using X framework. Deployment to server running NGINX Unit. SCP new binary to server. Ping Unit to load new app. Look into how to generate SVG images SVG are text. If we minify and compress them, could we serve them direct from a HTTP cache in front rather than storing them in object storage. Think about design of the frontend, how will it look? Buttons and sliders then click submit? How to handle scale? Need to set max limit on size otherwise it wont fit on screen and take loads of CPU time. Maybe set reasonable limits and just say if you need bigger then run it multiple times and join them up yourself. Maybe use standard colours to denote canopy layer, climbers, perrenials etc. Then have a text output which has a key and explains what specific plants are used. Rate limiting, caching etc. If you want to show changes over time, you'd need to generate a long series of images, or a GIF/video. So you may want to cache requests and already generated images when they have been generated before. Then maybe have an option to generate a new image which bypasses the cache. Lots of variables to consider Initial input parameters Light, wind, water Plants relationships to one another geographic location - will determine sun location, average temperature, hardiness zones","title":"Notes"},{"location":"#mscw","text":"field inputs to change grid, like size or zone/climate type show time periods to show different timelines of the plants. First planted / X years / X decades. Trees will outlive most plants. Perrenials last longer than biennial etc. need a DB containing the different plants/trees and weighting for different plants. draw walls and ponds/lakes/water feature. Some plants like walls/shade. Some plants are aquatic. needs to be layered. Trees take up lots of space higher up, not so much at the base of the trunk. May also need to show underground, as some plants have tubers or other specific root structures. Square grid. Use regular shapes (just squares/rectangles?) to show plant location and area taken up. Application is responsible for generating the grid locations for each plant, then its up to the frontend to decide how to display it. Maybe instead of layers it could be 3 separate images, one for each layer. Then they could be side-by-side. Or overlaid, depends on the frontend. Label the circles underneath with an ID number, then have a key at the side that says the plant name and a link to a page which describes all aspects about that plant. Wont do - Seaweed app like vertical ocean farming. This can be done later or as a second app.","title":"MSCW"},{"location":"design-stages/","text":"Design Stages \u00b6 These are the chapters in the book: Ground preparation and planting Growing your own plants First design steps Designing wind protection Canopy species Design the canopy layer Shrub species Design the shrub layer Herbaceous perrenial and ground-cover species Designing the perennial/ground-cover layer Annuals, biennials and climbers Designing with annuals, biennials and climbers Clearings Paths Fungi in forest gardens Harvesting and preserving Maintenance Ongoing tasks Maybe have a page for each with a summary page or PDF generated at the end? This app is meant to make it easy though, not go into too much detail. Things like paths and clearings should just be autogenerated. Same with choosing plants, have some simple defaults, then it can be expanded later.","title":"Design Stages"},{"location":"design-stages/#design-stages","text":"These are the chapters in the book: Ground preparation and planting Growing your own plants First design steps Designing wind protection Canopy species Design the canopy layer Shrub species Design the shrub layer Herbaceous perrenial and ground-cover species Designing the perennial/ground-cover layer Annuals, biennials and climbers Designing with annuals, biennials and climbers Clearings Paths Fungi in forest gardens Harvesting and preserving Maintenance Ongoing tasks Maybe have a page for each with a summary page or PDF generated at the end? This app is meant to make it easy though, not go into too much detail. Things like paths and clearings should just be autogenerated. Same with choosing plants, have some simple defaults, then it can be expanded later.","title":"Design Stages"},{"location":"plant-info/","text":"Plant information \u00b6 Deciduous/Evergreen \u00b6 D indicates a deciduous woody plant or a herbaceous perennial that dies down to roots in winter. E indicates an evergreen plant. SE indicates a semi-evergreen plant. Zone (Hardiness zone) \u00b6 The zone number given for a plant gives an indication of its hardiness. The zone number indicates the minimum average winter temperatures that a plant can tolerate. Sun/shade preference \u00b6 This indicates the light conditions a plant really prefers and will thrive in. Full sun Light shade Moderate shade Deep shade Shade tolerance \u00b6 This indicates the shadiest conditions that a plant will grow happily in and persist. Does not tolerate shade Tolerates light shade Tolerates moderate shade Tolerates fairly deep shade Tolerates deep shade beneath evergreen trees and shrubs Performance ratings \u00b6 This indicates how well the plant performs in a forest garden, how well it grows and crops. Fertility \u00b6 If the plant is a fruiting plant: SF Self-fertile PSF Partially self-fertile SS Self-sterile M/F Male and female plants Cover \u00b6 For ground-layer plants, this indicates how well a dense planting covers the ground and excludes weeds. Poor Fair Good Very Good Products of a Forest Garden \u00b6 Fruits Vegetables Salad crops and herbs Dye plants Spices Poles and canes Basketry materials Medicinal plants Soap plants Sap and wood products Nuts and seeds Firewood Tying materials Mushrooms Honey","title":"Plant Information"},{"location":"plant-info/#plant-information","text":"","title":"Plant information"},{"location":"plant-info/#deciduousevergreen","text":"D indicates a deciduous woody plant or a herbaceous perennial that dies down to roots in winter. E indicates an evergreen plant. SE indicates a semi-evergreen plant.","title":"Deciduous/Evergreen"},{"location":"plant-info/#zone-hardiness-zone","text":"The zone number given for a plant gives an indication of its hardiness. The zone number indicates the minimum average winter temperatures that a plant can tolerate.","title":"Zone (Hardiness zone)"},{"location":"plant-info/#sunshade-preference","text":"This indicates the light conditions a plant really prefers and will thrive in. Full sun Light shade Moderate shade Deep shade","title":"Sun/shade preference"},{"location":"plant-info/#shade-tolerance","text":"This indicates the shadiest conditions that a plant will grow happily in and persist. Does not tolerate shade Tolerates light shade Tolerates moderate shade Tolerates fairly deep shade Tolerates deep shade beneath evergreen trees and shrubs","title":"Shade tolerance"},{"location":"plant-info/#performance-ratings","text":"This indicates how well the plant performs in a forest garden, how well it grows and crops.","title":"Performance ratings"},{"location":"plant-info/#fertility","text":"If the plant is a fruiting plant: SF Self-fertile PSF Partially self-fertile SS Self-sterile M/F Male and female plants","title":"Fertility"},{"location":"plant-info/#cover","text":"For ground-layer plants, this indicates how well a dense planting covers the ground and excludes weeds. Poor Fair Good Very Good","title":"Cover"},{"location":"plant-info/#products-of-a-forest-garden","text":"Fruits Vegetables Salad crops and herbs Dye plants Spices Poles and canes Basketry materials Medicinal plants Soap plants Sap and wood products Nuts and seeds Firewood Tying materials Mushrooms Honey","title":"Products of a Forest Garden"},{"location":"blog/fff/","text":"","title":"Food, Forests & Freedom"},{"location":"blog/rrr/","text":"","title":"Robots, Reactors & Rockets"},{"location":"blog/vegan/","text":"","title":"Vegan"},{"location":"blog/zerowaste/","text":"","title":"Zero Waste"}]}